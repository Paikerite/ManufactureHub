@using ManufactureHub.Data.Enums
@model IEnumerable<ManufactureHub.Models.TaskViewModel>

@{
    ViewData["Title"] = "Завдання";
}

<div class="container-fluid board-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Дашборд завдань</h2>
        @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
        {
            <a asp-action="Create" class="btn btn-primary">Створити</a>
        }
    </div>

    <div class="d-flex flex-nowrap overflow-auto" id="taskBoard">
        <!-- IN PROGRESS Column -->
        <div class="board-column flex-shrink-0 w-25 status-in-progress drop-target" data-status="in-progress">
            @{
                IEnumerable<TaskViewModel> tasksInProgress = Enumerable.Empty<TaskViewModel>();
                if (Model != null)
                {
                    tasksInProgress = Model.Where(t => t.StatusTask == StatusTask.inprogress);
                }
            }
            <h5>В процесі <span class="badge bg-secondary">@tasksInProgress.Count()</span></h5>
            @foreach (var task in tasksInProgress)
            {
                <div class="task-card" data-task-id="@task.Id" data-status="in-progress">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            @task.Name
                        </h6>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="btn-group dropstart">
                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@task.Id">Редагувати</a></li>
                                    }
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@task.Id">Деталі</a></li>
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@task.Id">Видалити</a></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="mt-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            @{
                                var daysDiff = (task.Deadline - DateTime.Now).Days;
                                if (daysDiff < 0)
                                {
                                    <span>@Math.Abs(daysDiff) день/днів тому</span>
                                }
                                else
                                {
                                    <span>Через @daysDiff день/днів</span>
                                }
                            }
                        </small>
                        <span class="badge @GetPriorityClass(task.Priority)">
                            @task.Priority
                        </span>
                    </div>
                </div>
            }
        </div>

        <!-- UNDER REVIEW Column -->
        <div class="board-column flex-shrink-0 w-25 status-under-review drop-target" data-status="under-review">
            @{
                IEnumerable<TaskViewModel> tasksUnderreview = Enumerable.Empty<TaskViewModel>();
                if (Model != null)
                {
                    tasksUnderreview = Model.Where(t => t.StatusTask == StatusTask.underreview);
                }
            }
            <h5>Під розглядом <span class="badge bg-secondary">@tasksUnderreview.Count()</span></h5>
            @foreach (var task in tasksUnderreview)
            {
                <div class="task-card" data-task-id="@task.Id" data-status="under-review">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            @task.Name
                        </h6>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="btn-group dropstart">
                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@task.Id">Редагувати</a></li>
                                    }
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@task.Id">Деталі</a></li>
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@task.Id">Видалити</a></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="mt-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            @{
                                var daysDiff = (task.Deadline - DateTime.Now).Days;
                                if (daysDiff < 0)
                                {
                                    <span>@Math.Abs(daysDiff) день/днів тому</span>
                                }
                                else
                                {
                                    <span>Через @daysDiff день/днів</span>
                                }
                            }
                        </small>
                        <span class="badge @GetPriorityClass(task.Priority)">
                            @task.Priority
                        </span>
                    </div>
                </div>
            }
        </div>

        <!-- DONE Column -->
        <div class="board-column flex-shrink-0 w-25 status-done drop-target" data-status="done">
            @{
                IEnumerable<TaskViewModel> tasksDone = Enumerable.Empty<TaskViewModel>();
                if (Model != null)
                {
                    tasksDone = Model.Where(t => t.StatusTask == StatusTask.done);
                }
            }
            <h5>Виконано <span class="badge bg-secondary">@tasksDone.Count()</span></h5>
            @foreach (var task in tasksDone)
            {
                <div class="task-card" data-task-id="@task.Id" data-status="done">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            @task.Name
                        </h6>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="btn-group dropstart">
                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@task.Id">Редагувати</a></li>
                                    }
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@task.Id">Деталі</a></li>
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@task.Id">Видалити</a></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="mt-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            @{
                                var daysDiff = (task.Deadline - DateTime.Now).Days;
                                if (daysDiff < 0)
                                {
                                    <span>@Math.Abs(daysDiff) день/днів тому</span>
                                }
                                else
                                {
                                    <span>Через @daysDiff день/днів</span>
                                }
                            }
                        </small>
                        <span class="badge @GetPriorityClass(task.Priority)">
                            @task.Priority
                        </span>
                    </div>
                </div>
            }
        </div>

        <!-- REJECTED Column -->
        <div class="board-column flex-shrink-0 w-25 status-rejected drop-target" data-status="rejected">
            @{
                IEnumerable<TaskViewModel> tasksRejected = Enumerable.Empty<TaskViewModel>();
                if (Model != null)
                {
                    tasksRejected = Model.Where(t => t.StatusTask == StatusTask.rejected);
                }
            }
            <h5>Відмовлено <span class="badge bg-secondary">@tasksRejected.Count()</span></h5>
            @foreach (var task in tasksRejected)
            {
                <div class="task-card" data-task-id="@task.Id" data-status="rejected">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            @task.Name
                        </h6>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="btn-group dropstart">
                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@task.Id">Редагувати</a></li>
                                    }
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@task.Id">Деталі</a></li>
                                    @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadWorkstation"))
                                    {
                                        <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@task.Id">Видалити</a></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="mt-2 d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            @{
                                var daysDiff = (task.Deadline - DateTime.Now).Days;
                                if (daysDiff < 0)
                                {
                                    <span>@Math.Abs(daysDiff) день/днів тому</span>
                                }
                                else
                                {
                                    <span>Через @daysDiff день/днів</span>
                                }
                            }
                        </small>
                        <span class="badge @GetPriorityClass(task.Priority)">
                            @task.Priority
                        </span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetPriorityClass(Priority priority)
    {
        return priority switch
        {
            Priority.Low => "bg-success",
            Priority.Medium => "bg-warning",
            Priority.High => "bg-danger",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        // Initialize Interact.js for drag-and-drop
        @if (User.IsInRole("Admin") || User.IsInRole("TeamLeadSection"))
        {
            <text>
                interact('.task-card')
                    .draggable({
                        inertia: true, // Add inertia for smoother dragging
                        modifiers: [
                            interact.modifiers.restrictRect({
                                restriction: '#taskBoard', // Restrict movement within the task board
                                endOnly: true
                            })
                        ],
                        autoScroll: true, // Enable auto-scrolling when dragging near the edge
                        onmove: dragMoveListener,
                        onend: dragEndListener
                    });

                interact('.drop-target')
                    .dropzone({
                        accept: '.task-card',
                        overlap: 0.1, // Lower overlap requirement for easier dropping
                        ondrop: dropHandler,
                        ondragenter: function(event) {
                            event.target.classList.add('drop-hover'); // Visual feedback for drop zone
                        },
                        ondragleave: function(event) {
                            event.target.classList.remove('drop-hover'); // Remove hover effect when leaving
                        }
                    });
            </text>
        }

        function dragMoveListener(event) {
            const target = event.target;
            const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
            const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

            // Update the element's position
            target.style.position = 'absolute';
            target.style.transform = `translate(${x}px, ${y}px)`;
            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);

            // Add dragging class for visual feedback
            target.classList.add('dragging');
        }

        function dragEndListener(event) {
            const target = event.target;
            target.classList.remove('dragging');
            target.style.position = ''; // Reset position
            target.style.transform = ''; // Reset transform
            target.removeAttribute('data-x');
            target.removeAttribute('data-y');
        }

        function dropHandler(event) {
            const draggedElement = event.relatedTarget; // The task being dragged
            const dropZone = event.target.closest('.drop-target'); // Ensure we get the column, not a child element

            if (!dropZone) return; // Safety check
            const originalStatus = draggedElement.dataset.status;

            // Move the task to the drop zone
            dropZone.appendChild(draggedElement);

            // Reset the position and transform to ensure the task stays in the new position
            draggedElement.style.position = '';
            draggedElement.style.transform = '';

            // Update the task's status visually and on the server
            const taskId = draggedElement.dataset.taskId;
            const newStatus = dropZone.dataset.status;

            // Update the task card's status class for visual feedback
            updateTaskVisualStatus(draggedElement, newStatus);

            // Remove drop-hover from the drop zone after dropping
            dropZone.classList.remove('drop-hover');

            //console.log(`Task ${taskId} moved to ${newStatus}`); // Debug log
            updateTaskStatus(taskId, newStatus, () => {
            // On failure callback: Revert to original column
                const originalColumn = document.querySelector(`.drop-target[data-status="${originalStatus}"]`);
                if (originalColumn) {
                    originalColumn.appendChild(draggedElement);
                    updateTaskVisualStatus(draggedElement, originalStatus);
                }
            });
        }

        // Function to update the visual status of the task card
        function updateTaskVisualStatus(taskElement, status) {
            // Remove all status classes
            taskElement.classList.remove('status-in-progress', 'status-under-review', 'status-done', 'status-rejected');

            // Add the new status class
            // switch (status) {
            //     case 'in-progress':
            //         taskElement.classList.add('status-in-progress');
            //         break;
            //     case 'under-review':
            //         taskElement.classList.add('status-under-review');
            //         break;
            //     case 'done':
            //         taskElement.classList.add('status-done');
            //         break;
            //     case 'rejected':
            //         taskElement.classList.add('status-rejected');
            //         break;
            // }
        }

        // Simulate updating task status on the server (replace with actual API call)
        function updateTaskStatus(taskId, newStatus, onError) {
            const formData = new FormData();
            formData.append('taskId', parseInt(taskId));
            formData.append('status', newStatus);

            fetch('/Task/UpdateTaskStatus', {
                method: 'POST',
                body: formData
            })
            .then(response => {
                const contentType = response.headers.get('content-type');
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        throw new Error('Unauthorized: You do not have permission to update task status');
                    }
                    if (contentType && contentType.includes('application/json')) {
                        return response.json().then(errorData => {
                            throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
                        });
                    } else {
                        return response.text().then(text => {
                            throw new Error(`Non-JSON response: ${text || 'Unknown error'} (Status: ${response.status})`);
                        });
                    }
                }
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Response is not JSON');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Success:', data.message);
                } else {
                    throw new Error(data.error || 'Unknown error');
                }
            })
            .catch(error => {
                console.error('Error:', error.message);
                alert(`Failed to update task status: ${error.message}`);
                if (onError) onError();
            });
        }
    </script>
}